---
description: Python Styleguide
globs: *.py
alwaysApply: false
---

- Line length: 88 characters
- Type hints: Required for all public APIs
- Docstrings: Google style for all public methods
- Imports: Sorted with isort, Black-compatible
- String formatting: f-strings preferred over .format() or %

## Import Patterns
- Use absolute imports within the package
- Keep imports at module level when possible
- Group imports: stdlib, third-party, local
- Use `from typing import` for type hints (not `import typing`)
- Prefer `from pathlib import Path` over `import pathlib`

## Specific Patterns
- **Type annotations**:
    - Use `list[str]` instead of `List[str]`
    - Use `str | None` instead of `Union[str, None]`
    - for `__init__` methods use `-> None` for return type
- **Match statements**: Use `match/case` for complex conditionals
- **Dataclasses**: Use `@dataclass` for simple data containers
- **Context managers**: Use `contextlib.ExitStack` for multiple contexts
- **Async patterns**: Use `asyncio.gather()` for concurrent operations
- **Error handling**: Use specific exception types, avoid bare `except:`
    - When raising from inside the `except ... as e:`, use `raise ... from e`

## When Modifying Existing Code
1. **Preserve API compatibility**: Don't break existing interfaces
2. **Update documentation**: Keep docs in sync with code
3. **Add tests**: Ensure new functionality is tested
4. **Run quality checks**: Black, Ruff, MyPy before committing

## When Adding Dependencies
1. **Minimal dependencies**: Prefer standard library when possible
2. **Version pinning**: Use specific versions in requirements
3. **Optional dependencies**: Use extras for optional features
4. **Documentation**: Update installation instructions

## Tests
- All tests must reside under `tests/` folder
- Unit tests for all new functionality
- Test both sync and async forward methods
- **Type validation tests** - ensure Pydantic models work correctly (if applicable)
- **Edge case testing** - test invalid inputs and type mismatches
- Aim for >90% test coverage
- Include edge cases and error conditions in the tests
- Mark tests:
  - Integration: `@pytest.mark.integration`
  - Async: `@pytest.mark.asyncio`

## Documentation
- Every module, class, and method must have a comprehensive docstring
- The docstrings must have the following parts separated by an empty line:
  - One line description (descriptive, such as "Adds ...", "Modifies ...", "Computes ...", etc.)
  - An expanded description (optional for simple modules / functions)
  - `Args:`, `Returns:`, and `Raises:` sections describing the IO and errors if applicable
  - `Example:` section (if applicable) showing how to use this
- The docstrings must follow the `numpy` and `pytorch` style, with an intention to compile online documentation using `sphinx`

## Performance Considerations

**Async Execution**
- Keep sync forward methods fast and non-blocking
- Use thread pool for CPU-intensive operations
- Leverage async forward for I/O operations
- Avoid blocking the event loop

**Memory Management**
- Use zero-copy data flow when possible
- Implement proper cleanup in `__del__` if needed
- Monitor memory usage in long-running workflows
